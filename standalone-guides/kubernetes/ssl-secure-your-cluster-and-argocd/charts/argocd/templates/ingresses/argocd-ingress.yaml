# Choose one of the following ingress configurations based on your needs.
# The first ingress will create a certificate by itself using the cert-manager.
# The second ingress will use the wildcard certificate created by the cert-manager.
---
apiVersion: networking.k8s.io/v1  
kind: Ingress  
metadata:  
  name: argocd-server-ingress  
  namespace: argocd  
  annotations:  
    cert-manager.io/cluster-issuer: letsencrypt-prod  # Use our ClusterIssuer  
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"  # Forward HTTPS directly to ArgoCD  
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"  # ArgoCD already uses HTTPS - If you encounter a redirect loop or are getting a 307 response code then you need to force the nginx ingress to connect to the backend using HTTPS by that annotation. 
spec:  
  ingressClassName: nginx  
  rules:  
  - host: argocd.yourdomain.com  
    http:  
      paths:  
      - path: /  
        pathType: Prefix  
        backend:  
          service:  
            name: argocd-server  
            port:  
              number: 443  
  tls:  
  - hosts:  
    - argocd.yourdomain.com  
    secretName: argocd-tls  # cert-manager stores the certificate here  
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: argocd-server-ingress
  namespace: argocd
  annotations:
    nginx.ingress.kubernetes.io/ssl-passthrough: "true" # Forward HTTPS directly to ArgoCD  
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"  # ArgoCD already uses HTTPS - If you encounter a redirect loop or are getting a 307 response code then you need to force the nginx ingress to connect to the backend using HTTPS by that annotation. 
spec:
  ingressClassName: nginx  # Ensure this matches your Ingress Controller
  rules:
  - host: argocd.yourdomain.com  # Replace with your actual domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: argocd-server  # Match the actual service name
            port:
              number: 443  # Ensure the service has this port exposed
  tls:
  - hosts:
    - argocd.yourdomain.com  # Replace with your actual domain
    secretName: technical-director-com-wildcard-tls


